{"version":3,"sources":["components/General.styled.jsx","components/contactForm/ContactForm.styled.jsx","redux/contacts/contacts-actions.js","components/contactForm/ContactForm.jsx","components/contactsList/ContaxList.styled.jsx","components/contactsList/ContactsList.jsx","components/filter/Filter.jsx","App.js","redux/contacts/contacts-reducers.js","redux/store.js","index.js"],"names":["Wrapper","styled","div","Title","h1","h2","Form","form","Label","label","props","filter","Input","input","Button","button","addContact","createAction","deleteContact","changeFilter","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","clear","onSubmit","evt","preventDefault","contact","id","uuidv4","notUniqueName","some","item","notUniqueNumber","alert","type","pattern","title","required","placeholder","onChange","target","value","List","ul","Item","li","ContactsList","filterElements","filterValue","toLowerCase","includes","map","onClick","currentTarget","Filter","App","createReducer","payload","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.601ec5d4.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  width: 1400px;\n  min-height: 100vh;\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: grey;\n`;\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  font-weight: 700;\n\n  margin: 0px;\n  margin-bottom: 10px;\n  padding: 0px;\n`;\n\nexport const Undertitle = styled.h2`\n  font-size: 30px;\n  font-weight: 600px;\n\n  margin: 0px;\n  margin-bottom: 10px;\n  padding: 0px;\n`;\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  text-align: center;\n\n  padding: 20px;\n\n  border-bottom: 5px solid black;\n`;\n\nexport const Label = styled.label`\n  font-size: 30px;\n  font-weight: 600;\n\n  display: flex;\n  justify-content: ${(props) => (props.filter ? \"center\" : \"space-between\")};\n  align-items: ${(props) => (props.filter ? \"center\" : \"baseline\")};\n\n  flex-direction: ${(props) => (props.filter ? \"column\" : \"row\")};\n\n  transition-duration: 500ms;\n\n  cursor: pointer;\n\n  margin-bottom: 10px;\n\n  &:hover,\n  &:focus {\n    color: orange;\n  }\n`;\n\nexport const Input = styled.input`\n  height: 30px;\n  width: 300px;\n\n  font-size: 20px;\n  font-weight: 500;\n\n  outline: none;\n\n  border: none;\n  border-radius: 10px;\n\n  transition-duration: 500ms;\n\n  padding-left: 10px;\n  margin-left: 20px;\n\n  &:hover,\n  &:focus {\n    color: orange;\n    border: 2px solid orange;\n  }\n`;\n\nexport const Button = styled.button`\n  font-size: 20px;\n  font-weight: 500;\n\n  width: 150px;\n  height: 30px;\n\n  border-radius: 10px;\n\n  transition-duration: 500ms;\n\n  &:hover,\n  &:focus {\n    background-color: orange;\n  }\n`;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Input, Label, Button, Form } from \"./ContactForm.styled\";\nimport { addContact } from \"../../redux/contacts/contacts-actions.js\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector((state) => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    const id = uuidv4();\n    const contact = { id, name, number };\n    const notUniqueName = contacts.some((item) => item.name === name);\n    const notUniqueNumber = contacts.some((item) => item.number === number);\n\n    if (notUniqueName) {\n      return alert(name + \" уже добавлен(а) в список контактов\");\n    } else if (notUniqueNumber) {\n      return alert(\"Уже добавлен контакт с номером: \" + number);\n    } else if (name === \"\" || number === \"\") {\n      return alert(\"Пожалуйста, введите Имя и номер.\");\n    } else {\n      dispatch(addContact(contact));\n      clear();\n    }\n  };\n\n  const clear = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Имя:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Введите имя\"\n          onChange={(evt) => {\n            setName(evt.target.value);\n          }}\n          value={name}\n        />\n      </Label>\n      <Label>\n        Номер:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"Введите номер телефона\"\n          onChange={(evt) => {\n            setNumber(evt.target.value);\n          }}\n          value={number}\n        />\n      </Label>\n      <Button type=\"submit\">Подтвердить</Button>\n    </Form>\n  );\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  list-style: none;\n\n  width: 1000px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n\n  margin: 0px;\n  margin-top: 20px;\n  padding: 0px;\n`;\n\nexport const Item = styled.li`\n  font-size: 26px;\n  font-weight: 600;\n\n  width: 400px;\n  height: 50px;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  border: 1px solid black;\n\n  background-color: #4b4b4b;\n\n  margin-right: 10px;\n  margin-bottom: 10px;\n  padding: 5px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 1px solid black;\n  border-radius: 50%;\n\n  padding: 5px;\n\n  background-color: #4b4b4b;\n\n  cursor: pointer;\n\n  transition-duration: 500ms;\n\n  &:hover,\n  &:focus {\n    border: 1px solid orange;\n    transform: rotate(360deg) scale(1.15);\n\n    svg {\n      fill: orange;\n    }\n  }\n\n  svg {\n    width: 30px;\n    height: 30px;\n\n    transition-duration: 500ms;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contacts-actions\";\nimport { List, Item, Button } from \"./ContaxList.styled\";\n\nexport default function ContactsList() {\n  const contacts = useSelector((state) =>\n    filterElements(state.contacts.items, state.contacts.filter)\n  );\n  const dispatch = useDispatch();\n\n  const filterElements = (contacts, filterValue) => {\n    return contacts.filter((contact) => {\n      return contact.name.toLowerCase().includes(filterValue.toLowerCase());\n    });\n  };\n\n  return (\n    <List>\n      {contacts.map((contact) => {\n        return (\n          <Item key={contact.id}>\n            {contact.name}: {contact.number}\n            <Button\n              id={contact.id}\n              onClick={(evt) => dispatch(deleteContact(evt.currentTarget.id))}\n            >\n              <FaRegTrashAlt />\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input, Label } from \"../contactForm/ContactForm.styled\";\nimport { changeFilter } from \"../../redux/contacts/contacts-actions\";\n\nexport default function Filter() {\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label filter=\"true\">\n      Введите имя для поиска в списке контактов\n      <Input\n        name=\"filter\"\n        onChange={(evt) => dispatch(changeFilter(evt.target.value))}\n        value={filter}\n      />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import \"./App.module.css\";\n// import { useEffect } from \"react\";\nimport { Wrapper, Title } from \"./components/General.styled\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactsList from \"./components/contactsList/ContactsList\";\nimport Filter from \"./components/filter/Filter\";\n\nexport default function App() {\n  return (\n    <Wrapper>\n      <Title>Телефонная книга:</Title>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n    </Wrapper>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, changeFilter } from \"./contacts-actions\";\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((item) => item.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducers\";\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n});\n\nexport let persistor = persistStore(store);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport { store, persistor } from \"./redux/store.js\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}